#!/usr/bin/zsh

alias e=$EDITOR
alias j=jobs
alias h=history
function m { perl -MCPAN -e "print CPAN::Shell->format_result(q{Module}, q{$*})" }
alias t='Build test --test_files'
alias up='tar -zxvf'

# Git-related aliases
alias s='git status'
alias d='git diff'
alias ds='git diff --staged'
alias l='git lg'
alias la='git lg --all'
alias a='git add -p'
alias dup='git dup'
alias co='git checkout'
alias gd='git checkout develop'
alias gm='git checkout master'
alias st='git stash'
alias pig='git pruneitgood'

PYTHON=~/miniconda3/bin/python3

function venv () {
    local dir="${1:-venv}"
    ( command -v deactivate > /dev/null ) && deactivate
    if [[ ! -d $dir ]]; then
        "$PYTHON" -m virtualenv --python "$PYTHON" "$dir"
    fi
    . "$dir/bin/activate"
}

# Print the current branch name
function git_branch() {
    git rev-parse --abbrev-ref HEAD | tr -d '\n'
}

# Parse the JIRA ticket string out of the Git branch name
function git_ticket () {
    git_branch | perl -ne 'print m{(?:^|/)([A-Z][A-Z0-9]+-\d+)} ? qq{$1} : q{}'
}

# Commit staged changes, prepending JIRA ticket string to the message
function c () {
    x=$(git_ticket)
    if [[ -n $x ]]; then
        x="$x "
    fi
    git commit -m "$x$1"
}


alias mac2unix='perl -pi -e "tr/\r/\n/"'
alias dos2unix='perl -pi -e "tr/\r//d"'
alias javastring='mac2unix | perl -pe '"'"'BEGIN{print q/"/}; s/"/\\"/g; s/\n/\\n" +\n"/g; END {print q/"/}'"'"
alias findproc='ps auxww|grep'
alias test1='make test TEST_FILES=\!:1 TEST_VERBOSE=1'
alias look_storable='perl -d -MStorable -e '"'"'$x = retrieve(shift)'"'"
alias fullword='grep ^\!*$ /usr/share/dict/web2'
alias force='perl -le "sleep 1 while system @ARGV"'
alias pbedit='pbpaste > /tmp/pb; e /tmp/pb; pbcopy < /tmp/pb'

# Open JIRA in the browser to the ticket of the current Git branch
jira () {
    local ticket=${1:-$(git_ticket)}
    local jira=${JIRA_URL:-http://example.com/jira}
    local url="$jira/browse/$ticket"
    echo "$url"
    open "$url"
}

# Open GitHub / GitLab / Bitbucket in the browser to the current repository & current branch
repo () {
    local remote=${1:-origin}
    local url=$(git config remote.$remote.url)
    echo $url

    local branch=`git_branch`

    zmodload zsh/regex
    if [[ -n $BITBUCKET_URL && $url -regex-match 'git@[a-zA-Z.]+:7999/(.+)/(.+).git$' ]]
    then
        url2="${BITBUCKET_URL}/projects/$match[1]/repos/$match[2]/browse"
        if [[ $branch != 'HEAD' ]]; then
            url2="${url2}?at=refs/heads/${branch}"
        fi
        echo $url2
        open $url2
        return
    fi

    if [[ $url -regex-match 'git@([^:]+):(.+)\.git$' ]]
    then
        local url2="https://$match[1]/$match[2]"
        if [[ $branch != 'HEAD' ]]; then
            url2="${url2}/tree/${branch}"
        fi
        echo $url2
        open $url2
        return
    fi

    echo "Can't map remote URL '${url}' to web"
}

docker-populate() {
    local container=$1

    echo "Copying credentials into container"
    docker cp ~/.netrc $container:/root/
    docker cp ~/.ssh $container:/root/
    docker exec $container chown -R root /root/.netrc /root/.ssh
    docker exec $container chmod -R 400 /root/.netrc /root/.ssh

    local repo
    repo=$(git config --local --get remote.origin.url 2>/dev/null)
    if [[ $? -eq 0 ]]
    then
        echo "Cloning $repo into container"
        docker exec $container git clone "$repo" /tmp/repo
        local branch=$(git rev-parse --abbrev-ref HEAD)
        echo "Checking out $branch"
        docker exec $container git -C /tmp/repo checkout $branch
    else
        echo "Not in a git repo, skipping clone"
    fi
}

alias dr='docker run -it --rm'

alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias cdt='cd ~/bin/test'
alias cdm='cd ~/src/modules'
alias cdd='cd ~/Downloads'
alias cds='cd ~/src'
alias cdg='cd ~/Documents/SIA'
alias cdl='cdr -l'

mcd() {
    mkdir -p $1 && cd $1
}

cdpop() {
    # See https://superuser.com/questions/1565148/popd-for-cdr-based-directory-management-in-zsh/1565507#1565507
    local dir="$PWD"
    cdr
    cdr -P $dir
}

alias ls='ls -F'
alias mmv='noglob zmv -W'

alias cpan='perl -MCPAN -e shell'
alias pert='perl -a -F/\\t/'
alias R='R_HISTSIZE=10000 R --no-save --no-restore-data --quiet'

alias pip-deps='pip install . && pip uninstall `python setup.py --name`'

hcat  () { hdfs dfs -cat $1 }
hzcat () { hdfs dfs -cat $1 | bzcat }

if [[ "$(uname -s | cut -c 1-6)" == "CYGWIN" ]]; then
    alias open=cygstart
    alias pbcopy=putclip
    alias pbpaste=getclip
elif [[ "$(uname)" == "Darwin" ]]; then
    # Already have it
else
    alias pbcopy='xsel --clipboard --input'
    alias pbpaste='xsel --clipboard --output'
fi


# Print a bunch of changelog info that's helpful to writing an R 'NEWS' file or similar
rchangelog() {
    echo "Version XX  " $(date)
    echo "---------------------------"
    git --no-pager changelog $1..
}

aws_address_cluster () {
    while true
    do
	aws emr describe-cluster --cluster-id $1 | jq -e '.Cluster.MasterPublicDnsName | values | "http://" + . + ":8787"' && break
	echo "Waiting..."
	sleep 1
    done
}

aws_address_ec2 () {
    while true
    do
	aws ec2 describe-instances --filters Name=tag:Name,Values=$1 | jq '.Reservations[0].Instances[0].PublicDnsName | values' && break
	echo "Waiting..."
	sleep 1
    done
}


if [[ $OSTYPE == darwin* ]]; then
   alias top='top -u'
   alias E='open -a Emacs'
   alias showdots='defaults write com.apple.finder AppleShowAllFiles YES; killall Finder /System/Library/CoreServices/Finder.app'
   alias hidedots='defaults write com.apple.finder AppleShowAllFiles NO;  killall Finder /System/Library/CoreServices/Finder.app'

   brewperms () {
       BREW=/usr/local
       for f ( $BREW $BREW/bin $BREW/share $BREW/share/man $BREW/share/man/man1 ) do
          sudo chgrp admin $f
          sudo chmod g+w $f
       done
   }
fi

weather () {
    local args=()
    if [[ $# -gt 0 ]]; then
        args=(-l $1)
    fi
    date
    ansiweather "${args[@]}"
    ansiweather -F "${args[@]}"
}


# Use ffpmeg and imagemagick to quickly convert a .mov to a .gif.
# Primarily used for quickly converting screencasts
# into gifs (which can then be viewed online easily)
mov2gif () {
    # Seen at https://community.rstudio.com/t/is-there-a-way-to-record-code-typing-and-execution-as-a-video-gif-etc-in-rstudio/13614/8

    if [ "$#" -eq 0 ]; then
	echo "Usage: mov2gif input [output]"
	return 1
    fi

    if [ "$#" -eq 1 ]; then
	OUTPUT="${1%.mov}".gif
    else
	OUTPUT="$2"
    fi

    ffmpeg -i "$1" -r 20 -f image2pipe -vcodec ppm - | \
	convert -delay 5 -fuzz 1% -layers Optimize -loop 0 - "${OUTPUT}"
}

binary_diff () {
    hexdump -C $1 > /tmp/${1:t}
    hexdump -C $2 > /tmp/${2:t}
    git diff "$@[3,-1]" --no-index /tmp/${1:t} /tmp/${2:t}
}
