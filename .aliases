#!/usr/bin/zsh

alias e=$EDITOR
alias j=jobs
alias h=history
alias t='Build test --test_files'
alias up='tar -zxvf'

# Git-related aliases
alias s='git status'
alias d='git diff'
alias ds='git diff --staged'
alias l='git lg'
alias la='git lg --all'
alias a='git add -p'
alias dup='git dup'
alias co='git checkout'
alias gd='git checkout $(git_dev_branch)'
alias gm='git checkout $(git_pub_branch)'
alias git_main_branch='git branch -l master main'
alias rd='git rebase origin/develop'
alias st='git stash'
alias pig='git pruneitgood'

function git_dev_branch() {
    git for-each-ref --format '%(refname:short)' 'refs/heads/dev/v*' 'refs/heads/develop' | head -n 1
}

function git_pub_branch() {
    git for-each-ref --format '%(refname:short)' 'refs/heads/pub/v*' 'refs/heads/main' 'refs/heads/master' | head -n 1
}


function resolve() {
    # See https://zsh.sourceforge.io/FAQ/zshfaq03.html
    ${=EDITOR} $(git diff --name-only --diff-filter=U)
}

function warn() {
    echo "$1" >&2
}

PYTHON=~/miniconda3/bin/python3

function venv () {
    local dir="${1:-venv}"
    ( command -v deactivate > /dev/null ) && deactivate
    if [[ ! -d $dir ]]; then
        "$PYTHON" -m virtualenv --python "$PYTHON" "$dir"
    fi
    . "$dir/bin/activate"
}

# Print the current branch name
function git_branch() {
    git rev-parse --abbrev-ref HEAD | tr -d '\n'
}

# Parse the JIRA ticket string out of the Git branch name
function git_ticket () {
    git_branch | perl -ne 'print m{(?:^|/)([A-Z][A-Z0-9]+-\d+)} ? qq{$1} : q{}'
}

# Determine the numeric ID of the current repository in the gitlab server
function gitlab_id () {
    local remote
    remote="$(git config remote.origin.url)" || return $?
    [[ -z $remote ]] && { warn "Can't find remote URL"; return 1; }

    local proj
    proj="$(echo "$remote" | sed -E 's/.*:(.+)\.git\s*$/\1/')" || return $?
    [[ -z $proj ]] && { warn "Can't parse url ${remote} to find project name"; return 1; }

    local proj_id
    proj_id="$(gitlab_api "/projects/$(printf "$proj" | jq -sRr @uri)" | jq .id )" || return $?

    printf "$proj_id"
}

# Commit staged changes, prepending JIRA ticket string to the message
function c () {
    x=$(git_ticket)
    if [[ -n $x ]]; then
        x="$x "
    fi
    git commit -m "$x$1"
}


alias mac2unix='perl -pi -e "tr/\r/\n/"'
alias dos2unix='perl -pi -e "tr/\r//d"'
alias javastring='mac2unix | perl -pe '"'"'BEGIN{print q/"/}; s/"/\\"/g; s/\n/\\n" +\n"/g; END {print q/"/}'"'"
alias findproc='ps auxww|grep'
alias test1='make test TEST_FILES=\!:1 TEST_VERBOSE=1'
alias fullword='grep ^\!*$ /usr/share/dict/web2'
alias force='perl -le "sleep 1 while system @ARGV"'
alias pbedit='pbpaste > /tmp/pb; e /tmp/pb; pbcopy < /tmp/pb'

# Convert tabs to spaces inplace
untab() {
  [[ "$#" -ne "1" ]] && { echo "A single argument must be provided"; exit 1; }
  tmp=`mktemp` && expand "$1" > "$tmp" && mv "$tmp" "$1"
}
alias detab=untab


plist2json () {
    # See https://stackoverflow.com/a/10991695/169947
    plutil -convert json -o - "$1" | jq .
}

# Open JIRA in the browser to the ticket of the current Git branch
jira () {
    local ticket=${1:-$(git_ticket)}
    local jira=${JIRA_URL:-http://example.com/jira}
    local url="$jira/browse/$ticket"
    echo "$url"
    open "$url"
}

# Run a query against the GitLab API.  Expects:
#  * $GITLAB_URL to be set
#  * ~/.gitlab-pat to contain personal access token
# Prints the result on STDOUT.  Returns non-zero error code on failure.
gitlab_api () {
    [[ -z $1 ]] && { warn "Usage: gitlab_api <path>"; return 1; }
    local query="$1"

    local pat
    pat="$(cat ~/.gitlab-pat)" || return $?

    local result
    result="$(curl --fail --no-progress-meter --header "PRIVATE-TOKEN: ${pat}" "${GITLAB_URL}/api/v4${query}")" || return $?

    printf "%s" "$result"
}

# Goes to MR for the current branch, or reports that there isn't one and offers to help create one
mr () {
    # TODO - if there's more than one MR for the named branch, let user pick which one
    local branch
    branch="$(git_branch)" || return $?
    echo "Branch: $branch" >&2

    local gl_id
    gl_id="$(gitlab_id)" || return $?

    local result
    result="$(gitlab_api "/projects/${gl_id}/merge_requests?scope=all&state=opened&source_branch=${branch}" | jq -r '.[].web_url')" || return $?

    [[ -z $result ]] && {
        warn "No MRs found in project ${gl_id} for branch '${branch}'"
        local web_url
        web_url="$(gitlab_api "/projects/${gl_id}" | jq -r .web_url)" && {
            warn "To create a MR:\n  ${web_url}/-/merge_requests/new?merge_request%%5Bsource_branch%%5D=${branch}\n"
        }
        return 1
    }

    echo "$result"
    open "$result"
}

# Open GitHub / GitLab / Bitbucket in the browser to the current repository & current branch
repo () {
    local remote=${1:-origin}
    local url=$(git config remote.$remote.url)
    echo "Remote is $url"

    local branch=`git_branch`

    zmodload zsh/regex

    if [[ -n $BITBUCKET_URL && $url -regex-match 'git@[a-zA-Z.]+:7999/(.+)/(.+).git$' ]]
    then
        url2="${BITBUCKET_URL}/projects/$match[1]/repos/$match[2]/browse"
        if [[ $branch != 'HEAD' ]]; then
            url2="${url2}?at=refs/heads/${branch}"
        fi
        echo "Opening $url2"
        open $url2
        return
    fi

    if [[ $url -regex-match 'git@([^:]+):(.+)\.git$' ]]
    then
        local url2="https://$match[1]/$match[2]"
    elif [[ $url -regex-match 'https:\/\/(.+)\.git$' ]]
    then
        local url2="https://$match[1]"
    else
        echo "Can't map remote URL '${url}' to web"
        return 1
    fi

    if [[ $branch != 'HEAD' ]]; then
        url2="${url2}/tree/${branch}"
    fi

    echo "Opening $url2"
    open $url2
}

docker-populate() {
    local container=$1

    echo "Copying credentials into container"
    docker cp ~/.netrc $container:/root/
    docker cp ~/.ssh $container:/root/
    docker exec $container chown -R root /root/.netrc /root/.ssh
    docker exec $container chmod -R 400 /root/.netrc /root/.ssh

    local repo
    repo=$(git config --local --get remote.origin.url 2>/dev/null)
    if [[ $? -eq 0 ]]
    then
        echo "Cloning $repo into container"
        docker exec $container git clone "$repo" /tmp/repo
        local branch=$(git rev-parse --abbrev-ref HEAD)
        echo "Checking out $branch"
        docker exec $container git -C /tmp/repo checkout $branch
    else
        echo "Not in a git repo, skipping clone"
    fi
}

alias dr='docker run -it --rm'
alias dr-x86='dr --platform linux/amd64'

alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias cdt='cd ~/bin/test'
alias cdm='cd ~/src/modules'
alias cdd='cd ~/Downloads'
alias cds='cd ~/src'
alias cdg='cd ~/Documents/SIA'
alias cdl='cdr -l'

mcd() {
    mkdir -p $1 && cd $1
}

cdpop() {
    # See https://superuser.com/questions/1565148/popd-for-cdr-based-directory-management-in-zsh/1565507#1565507
    local dir="$PWD"
    cdr
    cdr -P $dir
}

alias ls='ls -F'
alias mmv='noglob zmv -W'

alias cpan='perl -MCPAN -e shell'
alias pert='perl -a -F/\\t/'
alias R='R_HISTSIZE=10000 R --no-save --no-restore-data --quiet'

alias pip-deps='pip install --use-feature=in-tree-build . && pip uninstall -y `python setup.py --name`'

hcat  () { hdfs dfs -cat $1 }
hzcat () { hdfs dfs -cat $1 | bzcat }

if [[ "$(uname -s | cut -c 1-6)" == "CYGWIN" ]]; then
    alias open=cygstart
    alias pbcopy=putclip
    alias pbpaste=getclip
elif [[ "$(uname)" == "Darwin" ]]; then
    # Already have it
else
    alias pbcopy='xsel --clipboard --input'
    alias pbpaste='xsel --clipboard --output'
fi


# Print a bunch of changelog info that's helpful to writing an R 'NEWS' file or similar
rchangelog() {
    echo "Version XX  " $(date)
    echo "---------------------------"
    git --no-pager changelog $1..
}

aws_address_cluster () {
    while true
    do
	aws emr describe-cluster --cluster-id $1 | jq -e '.Cluster.MasterPublicDnsName | values | "http://" + . + ":8787"' && break
	echo "Waiting..."
	sleep 1
    done
}

aws_address_ec2 () {
    while true
    do
	aws ec2 describe-instances --filters Name=tag:Name,Values=$1 | jq '.Reservations[0].Instances[0].PublicDnsName | values' && break
	echo "Waiting..."
	sleep 1
    done
}


if [[ $OSTYPE == darwin* ]]; then
   alias top='top -u'
   alias E='open -a Emacs'
   alias showdots='defaults write com.apple.finder AppleShowAllFiles YES; killall Finder /System/Library/CoreServices/Finder.app'
   alias hidedots='defaults write com.apple.finder AppleShowAllFiles NO;  killall Finder /System/Library/CoreServices/Finder.app'

   brewperms () {
       BREW=/usr/local
       for f ( $BREW $BREW/bin $BREW/share $BREW/share/man $BREW/share/man/man1 ) do
          sudo chgrp admin $f
          sudo chmod g+w $f
       done
   }
fi

versions () {
    # Usage: versions <package>
    # Print all available versions of <package>

    # TODO - add some command-line switches:
    #  * --r look for R packages
    #  * --python look for Python packages (default)
    #  * -1 output one version per line
    #  * --comma output comma-separated list (default)
    #  * --match <spec> only versions matching spec (e.g. '>=2.5,<3.0' or '~=1.0')
    if [[ $1 == "-r" ]]; then
        versions-r "${@:2}"
    else
        versions-python "$@"
    fi
}

versions-python () {
    local result
    result=$("$PYTHON" -m pip install -v "$1"== 2>&1)
    {
        echo "$result" | grep -q 'ERROR: Could not find'
    } || {
        warn "$result" && return 1
    }

    echo "$result" | sed -E 's/^ERROR: Could not find.*\(from (.*)\)/\1/p;d'
}

versions-r () {
    local package="$1"
    local repos repo rname rurl

    repos=$(Rscript -e 'cat(unname(getOption("repos")), sep="\n")')
    for repo in $repos; do
        if [[ $repo =~ nexus ]]; then
            rname=$(echo "$repo" | sed -E 's#.+/([^/]+)/?#\1#')
            rurl=$(echo "$repo" | sed -E 's#^([^/]+:/+[^/]+)/?.*#\1#')
            curl --silent -netrc "${rurl}/service/rest/v1/search?repository=${rname}&name=${package}" | \
                jq -r '.items[].version' | \
                perl -e "chomp(@x=sort <>); print '${rname}: ', join(q{, }, @x), qq{\n}"
        else
            printf "CRAN: "
            curl -s -o /tmp/archive.rds https://cran.rstudio.com/src/contrib/Meta/archive.rds && \
                Rscript -e 'x <- readRDS("/tmp/archive.rds"); cat(sub(".+_(.+)\\\\.tar\\\\.gz", "\\\\1", rownames(x$'$package')), sep=", ")'
            echo
        fi
    done
}

weather () {
    local args=()
    if [[ $# -gt 0 ]]; then
        args=(-l $1)
    fi
    date
    ansiweather "${args[@]}"
    ansiweather -F "${args[@]}"
}


# Use ffpmeg and imagemagick to quickly convert a .mov to a .gif.
# Primarily used for quickly converting screencasts
# into gifs (which can then be viewed online easily)
mov2gif () {
    # Seen at https://community.rstudio.com/t/is-there-a-way-to-record-code-typing-and-execution-as-a-video-gif-etc-in-rstudio/13614/8

    if [ "$#" -eq 0 ]; then
	echo "Usage: mov2gif input [output]"
	return 1
    fi

    if [ "$#" -eq 1 ]; then
	OUTPUT="${1%.mov}".gif
    else
	OUTPUT="$2"
    fi

    ffmpeg -i "$1" -r 20 -f image2pipe -vcodec ppm - | \
	convert -delay 5 -fuzz 1% -layers Optimize -loop 0 - "${OUTPUT}"
}

binary_diff () {
    hexdump -C $1 > /tmp/${1:t}
    hexdump -C $2 > /tmp/${2:t}
    git diff "$@[3,-1]" --no-index /tmp/${1:t} /tmp/${2:t}
}

after () {
    # Wait until the given process is done, then launch the given command
    # Example:
    #   after 1234 echo "Process 1234 is done"
    proc="$1"
    shift
    while true; do
        ps -p "$proc" > /dev/null || break
        sleep 1
    done
    eval "$@"
}

do_cmd () {
    echo "$*[@]"
    "$*[@]"
}

pyenv-new () {
    local name
    name=${1-"$(basename `pwd`)"}  # Default to name of current directory
    do_cmd pyenv virtualenv 3.9.13 "$name"
    do_cmd pyenv local "$name"
    do_cmd cd .
}
