[user]
        name = Ken Williams
        email = kenahoo@gmail.com
[color]
        diff = auto
        status = auto
[core]
        filemode = false
        pager = less -S
[grep]
        patternType = perl
[log]
        decorate = short
        date = relative
[merge]
        conflictstyle = diff3
[push]
        default = upstream
[stash]
        showPatch = true
[fetch]
        prune = true
[diff "xlsx"]
        binary = true
        textconv = xlsx2csv
[diff "gz"]
        textconv = gzcat
        binary = true
[diff "pandoc"]
        textconv = pandoc --to=markdown
        prompt = false
[diff "ansible-vault"]
        textconv = ansible-vault view
        cachetextconv = false
[alias]
        # A colored, reasonably terse view of the commit DAG
        lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset'

        # Print a bunch of changelog info that's helpful to writing an R 'NEWS' file or similar
        changelog = log --graph --no-color --pretty=format:'%s [%h]'

        # Stage the changes in files without staging their whitespace changes
        addnw = "!f() { git diff -U0 -w --no-color \"$@\" | git apply --cached --ignore-whitespace --unidiff-zero -; }; f"

        # When on a local branch with no counterpart in 'origin', push it to a new branch in 'origin' with the same name
        pushup = "!f() { git push -u ${1:-origin} HEAD; }; f"

        # Force a branch push, taking care to avoid race conditions that would clobber other people's changes made in the
        # meantime.  This does *not* make it impossible to clobber other people's work if you're not careful, so be careful!
        pushitgood = push --force-with-lease

        # Prune any dangling tracking branches, and any local branches that are supposed to sync to them
        pruneitgood = "!f() { \n\
            git remote prune ${1:-origin}; \n\
            git branch -vv | perl -nale 'system(qw(git branch -d), $F[0]) if $F[3] eq q{gone]}'; \n\
        }; f"

        # Determine the development head of this repository.  If there's not one, assume we're using mainline
        # (main or master) development.  Handy for rebasing feature branches.
        # See https://stackoverflow.com/questions/79040111/git-dont-sort-for-each-ref-output for ordering technique.
        dev-branch = "!f() { \n\
            for branch in 'refs/heads/master' 'refs/heads/main' 'refs/heads/develop' 'refs/heads/dev/v*'; do \n\
                git for-each-ref --format '%(refname:short)' \"$branch\" \n\
            done | tail -n 1 \n\
        }; f"

        graphviz = "!f() { echo 'digraph git {' ; git log --pretty='format:  %h -> { %p }' \"$@\" | sed 's/[0-9a-f][0-9a-f]*/\"&\"/g' ; echo '}'; }; f"

        # Show aliases in this file
        alias = "config --global --get-regex ^alias\\\\."

        merge-to = "!f() { git checkout $1 && git merge $2 && git checkout -; }; f"

        # Get updates from a remote branch into its local counterpart.  Example: 'git update develop'.
        update = "!f() { git push . origin/$1:$1; }; f"

        # Add entries to '.gitignore' without openig an editor
        ignore = "!f() { set -f; for i in $@; do echo $i >> .gitignore; done; }; f"

        dup = "diff @{upstream}"

        # Rebase a given branch on top of develop, then push with force.  This makes rebasing easier, which encourages
        # rebasing-based workflows.  Use with care.
        freshen-to-develop = "!f() { \
                  [ $# -lt 1 ] && echo 'Usage: git freshen-to-develop <branch>' && exit 1; \
                  git checkout $1 && git rebase 'origin/develop' && git pushitgood && git checkout -; }; f"

        freshen = "!f() { \
                  [ $# -lt 1 ] && echo 'Usage: git freshen <branch> [<onto-branch>]' && exit 1; \
                  onto=${2:-develop}; \
                  git checkout $1 && git rebase origin/$onto && git pushitgood && git checkout -; }; f"

        branch-owners = "for-each-ref --sort='-authordate' --format='%(committerdate:iso8601) %09 %(authorname) %09 %(refname:strip=2)' 'refs/remotes'"
        push-status = "for-each-ref --format='%(align:width=26,position=left)%(push:track)%(end)%(refname:short)' refs/heads"
        unstage = reset

        fixup = commit --amend --no-edit

        # Show sizes of all files in the Git history.  Pipe to `tail` to just get biggest ones.
        # See https://stackoverflow.com/q/10622179/169947 .
        bigfiles = "!f() { \
            git rev-list --objects --all | \
            git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' | \
            sed -n 's/^blob //p' | \
            sort --numeric-sort --key=2 | \
            cut -c 1-12,41- | \
            $(command -v gnumfmt || echo numfmt) --field=2 --to=iec-i --suffix=B --padding=7 --round=nearest; \
          }; f"

        # Edit an existing annotated tag, or turn an existing un-annotated tag into an annotated tag
        edit-tag = "!f() { \
            [ $# -lt 1 ] && echo 'Usage: git edit-tag <tag>' && exit 1; \
            git tag \"$1\" \"$1\"^{} -f -a; \
          }; f"

# [filter "lfs"]
#        clean = git-lfs clean -- %f
#        smudge = git-lfs smudge -- %f
#        required = true
#        process = git-lfs filter-process
[pull]
        rebase = true
